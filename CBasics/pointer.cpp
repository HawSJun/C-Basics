#include <stdio.h>

int main()
{
	// 포인터 변수
	// 주소를 저장하는 변수
	// 자료형 + * 변수명
	// 해당 포인터 변수에게 전달된 주소를 해석하는 단위
	int i = 100;
	float f = 3.f;
	// int* pInt = nullptr;		// 아무것도 없다. 실제 값 0
	
	int* pInt = (int*)&f;   //int* pInt = &f;	// 문법 오류! but, 강제 캐스팅 가능 int* pInt = (int*)&f;		
	//int* pInt = &i; 
	// int 형 변수의 주소를 가리키는 포인터 변수
	// i의 주소를 가르키는 포인터 변수

	// 주소로 접근
	i = *pInt;			// pInt가 가르키고 있는 그곳(float)으로 접근해서 읽어드린 값을 i에 넣어라
	// (*pInt) = 200;		// 저장되어 있는 주소 값으로 참조하겠다.


	// 주소의 단위(byte), 주소를 표현하는 방식(정수)!!!!!
	// float을 하면 주소를 표현하는 방식이 실수 표현방식의 3이 부동소수점 방식으로 32비트가 채워져있음 
	// 그래서 int 관점에서 해석을 하게 되면 큰 숫자가 됨

	// !!!!!! 메모리 안에 데이터는 똑같은데 어떻게 해석을 하는지에 따라,
	// !!!!!! 관점에 따라서 값을 다르게 볼 수도 있다.
	// 같은 1바이트 변수인데 음수를 표현할 것인지 아닌지 비트 값은 메모리는 절대 바뀌지 않는데
	// 그런데 그걸 음수까지 표현하는 방식으로 봤을 땐 -1 이라고 보이기도 하고
	// 양수만 표현한다라고 봤을때는 똑같은 비트가 255로 보이기도 함.
	// 메모리 안에 들어있는 값이 바뀐게 아니라 해석을 달리한 것

	return 0;
}
// 포인터 - 변수의 주소를 저장

//주소 연산(&) : 변수의 주소를 가져옴.
//역참조 연산(*) : 포인터가 가리키는 주소의 값을 가져오거나 변경함.

//int a = 10;    // 정수형 변수 선언
//int* ptr;      // 정수형 포인터 변수 선언
//ptr = &a;      // 변수 a의 주소를 ptr에 저장
// printf("%d\n", *ptr); // 포인터를 통한 간접 참조, *ptr은 ptr이 가리키는 주소의 값
// 즉, *ptr == a 


//int arr[3] = { 10, 20, 30 };
//int* ptr = arr;  // arr == &arr[0] 와 같음
//
//printf("%d\n", *ptr);   // 출력: 10 (arr[0])
//printf("%d\n", *(ptr + 1)); // 출력: 20 (arr[1])
//printf("%d\n", *(ptr + 2)); // 출력: 30 (arr[2])


// 배열 포인터
// 배열 전체를 가리키는 포인터
//int arr[3] = { 10, 20, 30 };
//int (*ptr)[3] = &arr; // 배열 전체를 가리키는 포인터
// 배열의 원소에 접근하려면 (*ptr)[index] 형태를 사용

//#include <stdio.h>
//
//int main() {
//	int arr[3] = { 10, 20, 30 };
//	int (*ptr)[3] = &arr; // 배열 전체를 가리키는 포인터
//
//	printf("%d\n", (*ptr)[0]); // 출력: 10
//	printf("%d\n", (*ptr)[1]); // 출력: 20
//	printf("%d\n", (*ptr)[2]); // 출력: 30
//
//	return 0;
//}
//

// 포인터 배열
// 포인터 여러 개를 저정하는 배열
//int a = 10, b = 20, c = 30;
//int* ptrArr[3] = { &a, &b, &c }; // 포인터 배열 선언
//포인터 배열의 특징
// 1. 배열의 요소가 각각 변수의 주소를 저장하는 포인터다.
// 2 .ptrArr[i]는 변수의 주소를 저장하고 있다.
// 3. * ptrArr[i]를 사용하면 해당 주소의 값을 얻을 수 있다

//#include <stdio.h>
//
//int main() {
//	int a = 10, b = 20, c = 30;
//	int* ptrArr[3] = { &a, &b, &c }; // 포인터 배열 선언
//
//	printf("%d\n", *ptrArr[0]); // 출력: 10
//	printf("%d\n", *ptrArr[1]); // 출력: 20
//	printf("%d\n", *ptrArr[2]); // 출력: 30
//
//	return 0;
//}

