#include <stdio.h>

int main()
{
	// 포인터 변수
	// 주소를 저장하는 변수
	// 자료형 + * 변수명
	// 해당 포인터 변수에게 전달된 주소를 해석하는 단위
	int i = 100;
	float f = 3.f;
	// int* pInt = nullptr;		// 아무것도 없다. 실제 값 0
	
	int* pInt = (int*)&f;   //int* pInt = &f;	// 문법 오류! but, 강제 캐스팅 가능 int* pInt = (int*)&f;		
	//int* pInt = &i; 
	// int 형 변수의 주소를 가리키는 포인터 변수
	// i의 주소를 가르키는 포인터 변수

	// 주소로 접근
	i = *pInt;			// pInt가 가르키고 있는 그곳(float)으로 접근해서 읽어드린 값을 i에 넣어라
	// (*pInt) = 200;		// 저장되어 있는 주소 값으로 참조하겠다.


	// 주소의 단위(byte), 주소를 표현하는 방식(정수)!!!!!
	// float을 하면 주소를 표현하는 방식이 실수 표현방식의 3이 부동소수점 방식으로 32비트가 채워져있음 
	// 그래서 int 관점에서 해석을 하게 되면 큰 숫자가 됨

	// !!!!!! 메모리 안에 데이터는 똑같은데 어떻게 해석을 하는지에 따라,
	// !!!!!! 관점에 따라서 값을 다르게 볼 수도 있다.
	// 같은 1바이트 변수인데 음수를 표현할 것인지 아닌지 비트 값은 메모리는 절대 바뀌지 않는데
	// 그런데 그걸 음수까지 표현하는 방식으로 봤을 땐 -1 이라고 보이기도 하고
	// 양수만 표현한다라고 봤을때는 똑같은 비트가 255로 보이기도 함.
	// 메모리 안에 들어있는 값이 바뀐게 아니라 해석을 달리한 것

	return 0;
}