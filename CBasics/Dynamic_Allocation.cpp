#include <iostream>

// 변수
// 지역(스택)
// 전역, 정적, 외부(데이터)


// 메모리 영역
// 힙 영역(동적할당)


int main()
{
	//int* pInt = (int*)malloc(100);
	// 지정한 사이즈 만큼 힙 영역에 메모리를 생성
	// 할당해서 주소를 줬기 때문에 받은 곳이 포인터 변수여야 함.
	// 힙 메모리의 100바이트 할당되어 있는 시작 주소를 받음.
	// 반환 타입이 void*
	
	// 동적할당을 해주는 malloc 입장에서는 요청한 만큼의 메모리를 할당해주고 주소를 줘야하는데
	// 그 공간을 어떤 용도로 사용할지는 사용자가 정하는데, 그걸 포인터 타입으로 정함

	// malloc()은 특정한 타입의 데이터를 할당하는 것이 아니라 바이트 단위로 메모리를 할당하기 때문에
	// 반환값을 void* 로 정의하여 다양한 데이터 타입에 활용

	float* pF = (float*)malloc(4);
	int* pI = (int*)pF;		// 4바이트 할당했는데 float 포인트로도 받고 int 포인터로도 받음. 같은 공간을 가리킴

	*pF = 2.4f;				// float 포인터로 실수 2.4를 넣음 (부동 소수점 방식)
	
	int i = *pI;				// int 포인터로 접근해서 읽어오면 엄청 큰 값이 나옴.
						// why) int 포인터 입장에서는 실수 표현방식으로 기록한 값을 int 포인터로 접근해서 4바이트 만큼
						// 값을 읽어보면 부동소수점 방식으로 기록된 비트로 정수로 읽기 때문에

	// 동적할당
	// 1. 런타임 중어 대응 가능
	// 2. 사용자가 직접 메모리를 관리 해야함(해제)
	
	int iInput = 0;
	scanf_s("%d", &iInput);

	int* pInt = nullptr;

	if (iInput == 100) {
		pInt = (int*)malloc(100);
	}
	if (pInt != nullptr) {
		free(pInt);
	}

	return 0;
}