// 주석
// 설명 역할, 코드로 인식되지 않는다.

int main()
{

	// 1byte = 8bit
	// 8bit = 2^8 = 256가지 상태를 표현할 수 있음
	// 2^10 = 1024 묶음 = 1KB, 1024KB = 1MB, 1024MB = 1GB, 1024GB = 1TB
	// 자료형(Data Type) : 변수를 선언할 때 어떠한 자료의 형태를 나태내는지 설명하는 것
	// 자료형 : 변수를 선언할 때 사용, 변수의 크기와 형태를 결정
	// 자료형 그 자체로써는 어떤한 실체도 가지지 않음
	// 자료형은 선언할 메모리 공간의 이름을 부여(변수 이름)하고
	// 그 공간이 얼마의 크기가 되고 어떤 형태의 데이터를 담을 것인지를 부연 설명하는 것
	// 정수형 : char(1), short(2), int(4) ,long(4), long long(8)  (크기 단위, byte)
	// 실수형 : float(4), double(8)

	// 정수형 자료형
	int i = 0;

	// 1byte 양수만 표현
	// 256 가지 -> 0 ~ 255
	unsigned char c = 0;
	c = 0;
	//c = 255;
	c = -1; // 255로 표현됨

	// 1byte 양수, 음수 둘다 표현
	// -128 ~ 0 ~ 127, 음수, 양수를 다 표한하기 떄문에 최상위 비트를 부호비트로 사용
	char c1 = 0;
	c1 = -1; // 255를 넣었는데 -1로 표현됨

	// 음의 정수 찾기(2의 보수법)
	// 대응되는 양수의 부호를 반전 후, 1을 더한다.


	// 실수형 자료형

	int a = 4 + int(4.0); // 명시적으로 형변환을 해주어야 한다.

	// 정수와 실수는 메모리를 다루는 방식 자체가 다르다.(표현 방식이 다르다.)
	// 특정 비트값이 정확하게 정해져있는 정수와는 달리
	// 실수 표현방식은 정밀도에 의존한다
	// 따라서 double(8) 자료형이 float(4) 보다 더 아래의 소수점까지 정확하게 표현이 가능하다.

	// 부동소수점

	// 정수는 정수끼리, 실수는 실수까리 연산하되, 두 표현방식의 피연산자가 연산될 경우 명시적으로 변환하자!!
	float f = 10.2515f + (float)20;


	return 0;
}