#include <stdlib.h>
#include <stdio.h>


void Output(const int* pI)		// 포인터로 직접 접근해서 값을 확인할 수 있다.
{	// 여러 사람과 협업을 할 때 데이터가 너무 커서 읽기용으로 주소를 받아갈려고 하는 경우에
	// 포인트 앞에 const를 꼭 붙여야함! 

	int i = *pI;
	//*pI = 100;
	int* pInt = (int*)pI;	// 그래도 강제 캐스팅하면 값 변경 가능!
	*pInt = 1000;
}

int main()
{
	// 1. const
	const int i = 100;

	// const 와 포인터
	int a = 0;
	int* pInt = &a;

	*pInt = 1;	// a라는 변수안에 들어있는 값이 바뀜
	pInt = nullptr;
	
	// 포인터 변수에게 있어 상수화란
	// 1. 포인터 변수가 가리키고 있는 곳을 바꿀것인지 말것인지
	// 2. 포인터 변수 본인 자체가 상수화(const)가 되서 더 이상 다른 대상을 가리킬수 없게 될건지 말건지

	//==============
	// const 포인터
	//==============
	int b = 0;
	const int* pConstInt = &a;		// 포인터 변수가 가리키고 있는 곳이 상수화, 다른 변수를 가리킬수 있음
	
	// *pConstInt = 100;
	pConstInt = &b;		// 다른 변수의 주소값을 넣을 수 있음, but 포인터 변수가 가리키고 있는 원본을 수정할 수 없음

	//==============
	// 포인터 const
	//==============
	int* const pIntConst = &a;		// 포인터 변수 자체가 상수화, 주소값에 원본에 해당하는 a의 바꿀수 있음.
	
	*pIntConst = 400;
	//pIntConst = &b;		// 다른 변수의 주소값을 넣을 수 없음

	// 초기화 시 가리킨 대상만 가리킴, 가리키는 원본을 수정 할 수 없음.
	const int* const pConstIntConst = nullptr; 


	{
		int a = 0;
		const int* pInt = &a;
		// 가리키는 원본을 상수화 했다라는 말은 그 원본이 상수가됐다는 말이 아님
		// 포인터의 기능에서 본인이 가리킨 대상을 수정하는 기능이 상수화가 됐다.

		// *pInt = 100;
		// a = 100;		// a라는 변수가 상수화가 된 것은 아님!

		int* p = &a;
		*p = 100;
	}

	a = 100;
	Output(&a);



	/*---------- void---------- */
	void* pVoid = nullptr;
	// 주소를 저장하는 변수인데 그 주소로 갔을 때 그 원본의 형태를 어떤 식으로 볼지를 정하지 않았다.
	// 아무 변수의 주소를 다 받을 수 있다.
	// void 포인터는 주소를 넣어줬을때 주소의 원형을 특정 데이터 타입으로 해석을 하지 않기때문에
	// 그래서 역참조가 불가능!!!! (*pVoid)

	// void* 특징
	// 1. 원본의 자료형을 정하지 않음
	// 2. 어떠한 타입의 변수의 주소든 다 저장 가능
	// 3. 역참조 불가능
	// 4. 주소 연산 불가능

	{
		int a = 0;
		float f = 0.f;
		double d = 0.;
		long long ll = 0;

		pVoid = &a;
		pVoid = &f;
		pVoid = &d;
		pVoid = &ll;

		//*pVoid;		// 역참조를 할려면 자기가 가리키고 있는 곳을 해석을 하는 자료형이 있어하는데 void는 없음
					// 그 자료형에 맞게 몇 바이트로 접근 할건지, 접근 단위 바이트가 동일하더라도
					// 정수 방식으로 해석을 한건지, 실수 방식으로 해석을 할건지 해야하는데 void는 없음

		//pVoid + 1;	// 주소 연산도 안됨!!!
	}



	float* pFloat = nullptr;
	// 주소를 넣어주게되면 그 주소를 접근할 때 사용할 자료의 단위, 역참조의 단위, 원본을 float으로 보겠다.
	// 주소 그 자체를 float 타입으로 보는게 아니라 주소로 접근했을때 그 주소 번지에 해당하는 실제 메모리 공간을 float으로 보겠다.




	return 0;
}

// 단축키
// Ctrl + Shift + Space : 괄호에 해당 단축키를 하면 함수 원형이 나옴