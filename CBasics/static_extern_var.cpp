#include <stdio.h>

// 전역변수
int g_i = 0;	// Data 영역

// 다른 cpp 파일에 같은 전역변수를 작성하면 컴파일 단계에서는 문제가 없지만,
// 링크 단계에서 문제가 발생한다.

#include "func.h"
#include "common.h"

// 파일 마다 정적 변수를 선언하면, 해당 파일 내에서만 사용 가능한 변수가 된다.
// 정적 변수
static int g_istatic = 0;

// 선언되는 위치에 따라 동작이 차이가 있다!
// 하지만, 정적변수에 해당하는 static 키워드가 의미하는 공통적인 의미 자체는 변하지않는다. 

int Test()
{
	static int i = 0;					// C++ 문법 기준 static 변수 선언한 초기화 구문은 최초 한번만 실행되고 그 이후로는 실행되지 않는다.
	// 함수 안에 정적변수를 선언하면,
	// 함수가 호출될때마다 값을 넣겠다는 의미가 아니라
	// 이 함수에서만 접근 가능한 Data 영역에 만들어진 정적변수 초기값을 0으로 주겠다. 
	// Test 함수 내 고정
	// i는 호출 stack에 포함되어있지 않다
	// static 변수는 Data 영역에 저장되어있기 때문에 호출 stack에 포함되어있지 않다.

	// int a = 0;  // Test 함수가 호출됬을 때 Test 호출 stack에 a가 생성

	// i = 100;
	// Test 함수 내의 static 변수 i는 Test 함수 내에서 지칭할 수 있다.
	// 메모리 영역은 정적 변수이기 떄문에 Data 영역을 사용
	// 정적 변수를 특정 함수 내에 선언했을 떄, 해당 함수 내에서만 사용 가능하다.
	// 그 함수가 종료, 호출 되거나 할 때, stack 메모리를 사용하지 않기 때문에
	// 해당 함수의 호출과 종료에 따라서 생성되거나 해제되지 않고 유지된다. 


	// 요약 : 정벽변수는 함수 안에서 사용했을 때, 그 함수 안에서만 접근가능하지만,
	// 함수의 호출과 종료에 상관없이 프로그램 실행내내 유지 시킬 수 있는
	// Data 영역에 저장된 변수를 만들고 싶을 때 정적변수로 선언


	++g_i;
	++i;

	return i;
}


int main()
{
	g_istatic = 100;    // 정적변수 100을 선언
	g_iExtern = 500;	// common.h 파일에 g_iExtern 변수가 있다.
	// F12 : 선언 위치로 이동
	Add(0, 0);			// func.cpp에 있는 ADD 함수 호출

	Test();
	Test();
	Test();
	Test();
	int iCall = Test();

	g_i = 0;		// 전역변수 g_i는 main에서 지칭할 수 있다.
	// i = 50;			// Test 함수 내의 static 변수 i는 main에서 지칭할 수 없다.
	printf("Test 함수 호출 횟수 : %d\n", iCall);

	return 0;
}